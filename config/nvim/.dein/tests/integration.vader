Include: _setup.vader

Execute (Setup autocmd wrappers):
  function! g:NeomakeSetupAutocmdWrappers()
    let g:neomake_test_finished = []
    function! s:OnNeomakeFinished(context)
      let g:neomake_test_finished += [a:context]
    endfunction

    let g:neomake_test_countschanged = []
    function! s:OnNeomakeCountsChanged(context)
      let g:neomake_test_countschanged += [a:context]
    endfunction

    augroup neomake_tests
      au!
      au User NeomakeFinished call s:OnNeomakeFinished(g:neomake_hook_context)
      au User NeomakeCountsChanged call s:OnNeomakeCountsChanged(g:neomake_hook_context)
    augroup END
  endfunction

Execute (Test Neomake on errors.sh with one maker):
  call g:NeomakeSetupAutocmdWrappers()
  e! fixtures/errors.sh
  AssertEqual getline(1), '#! /bin/sh'

  if executable('shellcheck')
    AssertEqual neomake#GetEnabledMakers('sh'), ['sh', 'shellcheck']
  else
    AssertEqual neomake#GetEnabledMakers('sh'), ['sh']
  endif

  AssertEqual len(g:neomake_test_finished), 0
  AssertEqual len(g:neomake_test_countschanged), 0
  RunNeomake sh
  AssertNotEqual getloclist(0), []
  AssertEqual len(g:neomake_test_finished), 1
  AssertEqual len(g:neomake_test_countschanged), 1

  let bufnr = bufnr('%')
  RunNeomake sh
  AssertEqual len(g:neomake_test_countschanged), 2
  for idx in range(0, len(g:neomake_test_countschanged))
    AssertEqual [idx, g:neomake_test_countschanged[1].file_mode], [idx, 1]
    AssertEqual [idx, g:neomake_test_countschanged[1].bufnr], [idx, bufnr]
  endfor

Execute (Test Neomake on errors.sh with two makers):
  if index(neomake#GetEnabledMakers('sh'), 'shellcheck') != -1
    call g:NeomakeSetupAutocmdWrappers()
    e! fixtures/errors.sh
    RunNeomake sh shellcheck
    AssertEqual len(g:neomake_test_countschanged), 2
  endif

Execute (Neomake: handle result for current window):
  call g:NeomakeSetupAutocmdWrappers()
  let orig_winnr = winnr()
  let sleep_maker = {
      \ 'name': 'sleep_maker',
      \ 'exe': 'sh',
      \ 'args': ['-c', 'sleep 0.1; echo finished'],
      \ 'remove_invalid_entries': 0,
      \ }
  call neomake#Make(1, [sleep_maker])
  if neomake#has_async_support()
    new
    NeomakeTestsWaitForFinishedJobs
    AssertEqual len(g:neomake_test_countschanged), 0
    AssertEqual len(g:neomake_test_finished), 1
    AssertEqual map(copy(getloclist(0)), 'v:val.text'), []
    quit
    AssertEqual winnr(), orig_winnr
    AssertEqual map(copy(getloclist(0)), 'v:val.text'), ['finished']
  endif
  AssertEqual len(g:neomake_test_finished), 1
  AssertEqual len(g:neomake_test_countschanged), 1

Execute (Neomake: handle output for removed window):
  if neomake#has_async_support()
    call g:NeomakeSetupAutocmdWrappers()
    let orig_winnr = winnr()
    let sleep_maker = {
        \ 'name': 'sleep_maker',
        \ 'exe': 'sh',
        \ 'args': ['-c', 'sleep 0.1; echo finished'],
        \ 'remove_invalid_entries': 0,
        \ }
    let job_ids = neomake#Make(1, [sleep_maker])
    let bufnr = bufnr('%')
    new
    exe 'bd' bufnr
    NeomakeTestsWaitForFinishedJobs
    AssertEqual len(g:neomake_test_countschanged), 0
    AssertEqual len(g:neomake_test_finished), 1
    AssertNotEqual index(g:NeomakeTestsGetMessages(), printf(
      \ 'Neomake: [%d] No window found for output!', join(job_ids))), -1
  endif

Execute (NeomakeSh: true):
  call g:NeomakeSetupAutocmdWrappers()
  let bufnr = bufnr('%')
  RunNeomakeSh true
  AssertEqual g:neomake_test_countschanged, [{'bufnr': bufnr, 'file_mode': 0}]
  AssertEqual len(g:neomake_test_finished), 1
  AssertEqual getqflist(), []

Execute (NeomakeSh: non-existing command):
  call g:NeomakeSetupAutocmdWrappers()
  RunNeomakeSh 'nonexistingcommand'
  AssertEqual len(g:neomake_test_finished), 1
  AssertEqual g:neomake_test_countschanged, [{'file_mode': 0, 'bufnr': -1}]
  AssertEqual len(getqflist()), 1
  AssertNotEqual match(getqflist()[0].text, 'nonexistingcommand'), -1
  AssertNotEqual match(getqflist()[0].text, 'command not found'), -1

Execute (NeomakeSh: handle unfinished output on exit):
  call g:NeomakeSetupAutocmdWrappers()
  NeomakeSh sh -c 'echo 1; printf 2; sleep 0.1; echo -n 3'
  if neomake#has_async_support()
    for i in range(0, 10)
      if len(g:neomake_test_countschanged) == 1
        break
      endif
      sleep 10m
    endfor
    AssertNotEqual i, 10
    NeomakeTestsWaitForFinishedJobs
  endif
  AssertEqual len(g:neomake_test_finished), 1
  AssertEqual map(copy(getqflist()), 'v:val.text'), ['1', '23']
  AssertEqual len(g:neomake_test_countschanged), 2

Execute (NeomakeSh: project: handle removed window on exit):
  call g:NeomakeSetupAutocmdWrappers()
  new
  NeomakeSh sh -c 'sleep 0.5; echo finished'
  quit
  NeomakeTestsWaitForFinishedJobs
  AssertEqual len(g:neomake_test_finished), 1
  AssertEqual map(copy(getqflist()), 'v:val.text'), ['finished']
